#!/bin/sh
# Copyright (C) 2007 Mario Limonciello
# Copyright (C) 2009-2011 Canonical Ltd.

set -e

PACKAGE_NAME=#DRIVERCORENAME#
CVERSION=`dpkg-query -W -f='${Version}' $PACKAGE_NAME | awk -F "-" '{print $1}' | cut -d\: -f2`

ARCH=`dpkg --print-architecture`

INIT_SCRIPT="/etc/init/build-$PACKAGE_NAME.conf"
TMP_FILE="/tmp/do_not_build_dkms_module"

# Check the existence of a kernel named as $1
_is_kernel_name_correct() {
    CORRECT="no"
    KERNEL_NAME=$1

    for kernel in /boot/config-*; do
        KERNEL=${kernel#*-}
        if [ "${KERNEL}" = "${KERNEL_NAME}" ]; then
            CORRECT="yes"
            break
        fi
    done

    echo $CORRECT
}

# Get the most recent kernel on Debian based systems. This keeps
# into account both the version and the ABI. If the current kernel
# is the most recent kernel then the function will print a null string.
_get_newest_kernel_debian() {
    NEWEST_KERNEL=
    NEWEST_VERSION=
    NEWEST_ABI=

    for kernel in /boot/config-*; do
        KERNEL=${kernel#*-}
        KERNEL_VERSION=${KERNEL%%-*}
        ABI=${KERNEL#*-}
        ABI=${ABI%%-*}

        if [ -z "$NEWEST_KERNEL" ]; then
            # The 1st time get a version which is bigger than $1
            COMPARE_TO=$1
        else
            # Get the biggest version
            COMPARE_TO="$NEWEST_VERSION-$NEWEST_ABI"
        fi

        # if $kernel is greater than $COMPARE_TO
        if [ `dpkg --compare-versions "$KERNEL_VERSION-$ABI" gt "$COMPARE_TO" && echo "yes" || \
              echo "no"` = "yes" ]; then
            NEWEST_KERNEL=$KERNEL
            NEWEST_VERSION=$KERNEL_VERSION
            NEWEST_ABI=$ABI
        fi
    done

    echo "$NEWEST_KERNEL"
}


get_newest_kernel() {
    NEWEST_KERNEL=
    # Try Debian first as rpm can be installed in Debian based distros
    if [ -e /usr/bin/dpkg ]; then
        # If DEB based
        CURRENT_KERNEL=$1
        CURRENT_VERSION=${CURRENT_KERNEL%%-*}
        CURRENT_ABI=${CURRENT_KERNEL#*-}
        CURRENT_FLAVOUR=${CURRENT_ABI#*-}
        CURRENT_ABI=${CURRENT_ABI%%-*}
        NEWEST_KERNEL=$(_get_newest_kernel_debian "$CURRENT_VERSION-$CURRENT_ABI")

    elif [ `which rpm &>/dev/null` ]; then
        # If RPM based
        NEWEST_KERNEL=$(_get_newest_kernel_rhel)
    fi

    # Make sure that kernel name that we extracted corresponds to an installed
    # kernel
    if [ -n "$NEWEST_KERNEL" ] && [ `_is_kernel_name_correct $NEWEST_KERNEL` = "no" ]; then
        NEWEST_KERNEL=
    fi

    echo $NEWEST_KERNEL
}

backup_files() {
    BACKUP_DIR=#CORERESTOREDIR#

    [ ! -d $BACKUP_DIR ] && mkdir -p $BACKUP_DIR
    mkdir -p $BACKUP_DIR/etc/OpenCL/vendors/ $BACKUP_DIR/usr/lib \
          $BACKUP_DIR/usr/lib32 $BACKUP_DIR/usr/bin 2>/dev/null || true

    # Now that we are done transitioning the alternatives, let's restore
    # the backups
    echo "fglrx-core: creating backups for the fglrx-core transition"
    for elem in \
        /usr/bin/atiode \
        /usr/bin/clinfo \
        /usr/bin/atieventsd \
        /etc/OpenCL/vendors/amdocl32.icd \
        /etc/OpenCL/vendors/amdocl64.icd \
        /usr/lib/libaticalcl.so \
        /usr/lib/libatiuki.so.1.0 \
        /usr/lib/libaticalrt.so \
        /usr/lib/libatiadlxx.so \
        /usr/lib/libamdocl12cl64.so \
        /usr/lib/libOpenCL.so.1 \
        /usr/lib/libamdocl64.so \
        /usr/lib/libaticaldd.so \
        /usr/lib/libatiuki.so.1 \
        /usr/lib32/libamdocl32.so \
        /usr/lib32/libaticalcl.so \
        /usr/lib32/libatiuki.so.1.0 \
        /usr/lib32/libaticalrt.so \
        /usr/lib32/libatiadlxx.so \
        /usr/lib32/libamdocl12cl32.so \
        /usr/lib32/libOpenCL.so.1 \
        /usr/lib32/libaticaldd.so \
        /usr/lib32/libatiuki.so.1; do
    if [ -e "$elem" ]; then
        echo "Backing up $elem"
        cp -a $elem $BACKUP_DIR/$elem 2>/dev/null || true
    fi
    done
}

backup_ati_dir() {
    BACKUP_DIR=#CORERESTOREDIR#
    ATI_DIR=etc/ati
    ATI_PATH=/usr/lib/fglrx/$ATI_DIR
    DEST_DIR=$BACKUP_DIR/etc

    if [ -d $ATI_PATH ]; then
        echo "Backing up /$ATI_DIR"
        mkdir -p $DEST_DIR 2>/dev/null || true
        cp -a $ATI_PATH $DEST_DIR/ 2>/dev/null || true
    fi
}


if [ "$1" = "configure" ]; then

    # Make a backup of the files from fglrx-core (see LP: #1511301)
    # only if fglrx is already installed
    if [ -f /usr/lib/fglrx/libAMDXvBA.cap ]; then
        backup_files
        backup_ati_dir
    fi

    update-alternatives --force \
        --install /#SYSCONFDIR#/ld.so.conf.d/#DEB_HOST_MULTIARCH#_GFXCORE.conf #DEB_HOST_MULTIARCH#_gfxcore_conf /#CORELDSOCONF# #COREPRIORITY# \
        --slave /#SYSCONFDIR#/modprobe.d/fglrx-core.conf #DEB_HOST_MULTIARCH#_fglrxcore_modconf /lib/fglrx/core-modprobe.conf

    # Install just the ld.so.conf.d alternatives so that we can disable
    # the module blacklisting. This has to be a lower priority so that
    # it's not enabled by default.
    update-alternatives --force \
        --install /#SYSCONFDIR#/ld.so.conf.d/#DEB_HOST_MULTIARCH#_GFXCORE.conf #DEB_HOST_MULTIARCH#_gfxcore_conf /#UNBLKCORELDSOCONF# #UNBLKCOREPRIORITY#

    # ldconfig needs to be run immediately as we're changing /etc/ld.so.conf.d/ with
    # alternatives.
    LDCONFIG_NOTRIGGER=y ldconfig

    CURRENT_KERNEL=$(uname -r)
    NEWEST_KERNEL=$(get_newest_kernel "$KERNELS")

    ALTERNATIVE=$(readlink /etc/alternatives/#DEB_HOST_MULTIARCH#_gfxcore_conf)
    if [ "$ALTERNATIVE" = "/#LDSOCONF#" ]; then
        # Update initramfs so that the blacklist ends up in the initramfs
        update-initramfs -u

        if [ -n "$NEWEST_KERNEL" ] && [ ${CURRENT_KERNEL} != ${NEWEST_KERNEL} ]; then
            # This can fail when dealing with a chroot see LP: #556653
            update-initramfs -u -k $CURRENT_KERNEL || true
        fi
    fi

    # If the delayed module build feature is enabled
    # i.e. if $DONT_BUILD_MODULE is set to 1
    # or if $TMP_FILE exists
    if [ "${DONT_BUILD_MODULE}1" -eq "11" ] || [ -e $TMP_FILE ]; then
        # Do not build the module and create
        # the Upstart script which will
        # build the module on next boot
        cat > $INIT_SCRIPT <<EOF
# Warning: This file is autogenerated by $PACKAGE_NAME. All changes to this file will be lost.
start on (starting oem-config
          or starting gdm
          or starting kdm
          or starting xdm
          or starting uxlaunch)
task

script
     dkms add -m $PACKAGE_NAME -v $CVERSION
     /usr/lib/dkms/dkms_autoinstaller start || ( rm -f $INIT_SCRIPT && exit 1 )
     modprobe $PACKAGE_NAME || true
     rm -f $INIT_SCRIPT
end script
EOF
    else
        /usr/lib/dkms/common.postinst $PACKAGE_NAME $CVERSION /usr/share/$PACKAGE_NAME $ARCH $2
    fi

    #Update the initramfs as radeon might get loaded from it normally
    /usr/sbin/update-initramfs -u


    # NOTE: Usually generated by dh_installinit, but because two packages are
    # providing the same initscript, this needs some manual handling.
    if [ -x "/etc/init.d/atieventsd" ]; then
        update-rc.d atieventsd defaults 31 >/dev/null || exit $?
    fi
fi


#DEBHELPER#
