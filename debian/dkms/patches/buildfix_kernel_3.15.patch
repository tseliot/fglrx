From 771b984f322efb155570a24ba8b92d3c25dfca3b Mon Sep 17 00:00:00 2001
From: Alberto Milone <alberto.milone@canonical.com>
Date: Fri, 27 Jun 2014 16:15:18 +0200
Subject: [PATCH 1/1] Add support for Linux 3.15

Linux commit c6b406919288a617815f710175da20f3fca72065 makes
use_xsave() and use_fxsr() to call the GPL only static_cpu_has_safe()
instead of static_cpu_has().

Here's the current call sequence in firegl_public.c
KCL_fpu_begin -> __save_init_fpu-> save_init_fpu ->
(use_xsave|use_fxsr) -> static_cpu_has_safe

We temporarily work around this by reproducing the sequence and
calling static_cpu_has().
---
 firegl_public.c | 63 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 63 insertions(+)

diff --git a/firegl_public.c b/firegl_public.c
index 353cc0a..8f84eab 100755
--- a/firegl_public.c
+++ b/firegl_public.c
@@ -6308,6 +6308,61 @@ void ATI_API_CALL KCL_create_uuid(void *buf)
     generate_random_uuid((char *)buf);
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,15,0) && !defined(CONFIG_X86_64)
+
+static __always_inline __pure bool fglrx_use_xsave(void)
+{
+    return static_cpu_has(X86_FEATURE_XSAVE);
+}
+
+static __always_inline __pure bool fglrx_use_fxsr(void)
+{
+    return static_cpu_has(X86_FEATURE_FXSR);
+}
+
+/*
+ * These must be called with preempt disabled. Returns
+ * 'true' if the FPU state is still intact.
+ */
+static inline int fglrx_fpu_save_init(struct fpu *fpu)
+{
+    if (fglrx_use_xsave()) {
+        fpu_xsave(fpu);
+
+        /*
+         * xsave header may indicate the init state of the FP.
+         */
+        if (!(fpu->state->xsave.xsave_hdr.xstate_bv & XSTATE_FP))
+            return 1;
+    } else if (fglrx_use_fxsr()) {
+        fpu_fxsave(fpu);
+    } else {
+        asm volatile("fnsave %[fx]; fwait"
+                 : [fx] "=m" (fpu->state->fsave));
+        return 0;
+    }
+
+    /*
+     * If exceptions are pending, we need to clear them so
+     * that we don't randomly get exceptions later.
+     *
+     * FIXME! Is this perhaps only true for the old-style
+     * irq13 case? Maybe we could leave the x87 state
+     * intact otherwise?
+     */
+    if (unlikely(fpu->state->fxsave.swd & X87_FSW_ES)) {
+        asm volatile("fnclex");
+        return 0;
+    }
+    return 1;
+}
+
+static inline int fglrx_save_init_fpu(struct task_struct *tsk)
+{
+    return fglrx_fpu_save_init(&tsk->thread.fpu);
+}
+#endif
+
 /** \brief Prepare for using FPU
  *  \param none
  *  \return None
@@ -6322,7 +6377,11 @@ void ATI_API_CALL KCL_fpu_begin(void)
     struct task_struct *cur_task = get_current();
     preempt_disable();
     if (cur_thread->status & TS_USEDFPU)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,15,0)
+        fglrx_save_init_fpu(cur_task);
+#else
         __save_init_fpu(cur_task);
+#endif
     else
         clts();
 #else
@@ -6339,7 +6398,11 @@ void ATI_API_CALL KCL_fpu_begin(void)
 #else
     if (cur_task->thread.has_fpu)
 #endif
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,15,0)
+        fglrx_save_init_fpu(cur_task);
+#else
         __save_init_fpu(cur_task);
+#endif
     else
         clts();
 #endif
-- 
1.9.1

