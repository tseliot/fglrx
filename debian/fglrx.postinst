#!/bin/sh

set -e

PACKAGE_NAME=fglrx
CVERSION=`dpkg-query -W -f='${Version}' $PACKAGE_NAME | awk -F "-" '{print $1}' | cut -d\: -f2`

ARCH=`dpkg --print-architecture`

INIT_SCRIPT="/etc/init/build-$PACKAGE_NAME.conf"
TMP_FILE="/tmp/do_not_build_dkms_module"

# Check the existence of a kernel named as $1
_is_kernel_name_correct() {
    CORRECT="no"
    KERNEL_NAME=$1
    
    for kernel in /boot/config-*; do
        KERNEL=${kernel#*-}
        if [ "${KERNEL}" = "${KERNEL_NAME}" ]; then
            CORRECT="yes"
            break
        fi
    done

    echo $CORRECT
}

# Get the most recent kernel on Debian based systems. This keeps
# into account both the version and the ABI. If the current kernel
# is the most recent kernel then the function will print a null string.
_get_newest_kernel_debian() {
    NEWEST_KERNEL=
    NEWEST_VERSION=
    NEWEST_ABI=
    
    for kernel in /boot/config-*; do
        KERNEL=${kernel#*-}
        KERNEL_VERSION=${KERNEL%%-*}
        ABI=${KERNEL#*-}
        ABI=${ABI%%-*}

        if [ -z "$NEWEST_KERNEL" ]; then
            # The 1st time get a version which is bigger than $1
            COMPARE_TO=$1
        else
            # Get the biggest version
            COMPARE_TO="$NEWEST_VERSION-$NEWEST_ABI"
        fi
            
        # if $kernel is greater than $COMPARE_TO
        if [ `dpkg --compare-versions "$KERNEL_VERSION-$ABI" gt "$COMPARE_TO" && echo "yes" || \
              echo "no"` = "yes" ]; then
            NEWEST_KERNEL=$KERNEL
            NEWEST_VERSION=$KERNEL_VERSION
            NEWEST_ABI=$ABI
        fi
    done

    echo "$NEWEST_KERNEL"
}


get_newest_kernel() {
    NEWEST_KERNEL=
    # Try Debian first as rpm can be installed in Debian based distros
    if [ -e /usr/bin/dpkg ]; then
        # If DEB based
        CURRENT_KERNEL=$1
        CURRENT_VERSION=${CURRENT_KERNEL%%-*}
        CURRENT_ABI=${CURRENT_KERNEL#*-}
        CURRENT_FLAVOUR=${CURRENT_ABI#*-}
        CURRENT_ABI=${CURRENT_ABI%%-*}
        NEWEST_KERNEL=$(_get_newest_kernel_debian "$CURRENT_VERSION-$CURRENT_ABI")

    elif [ `which rpm &>/dev/null` ]; then
        # If RPM based
        NEWEST_KERNEL=$(_get_newest_kernel_rhel)
    fi

    # Make sure that kernel name that we extracted corresponds to an installed
    # kernel
    if [ -n "$NEWEST_KERNEL" ] && [ `_is_kernel_name_correct $NEWEST_KERNEL` = "no" ]; then
        NEWEST_KERNEL=
    fi

    echo $NEWEST_KERNEL
}


if [ "$1" = "configure" ]; then

    #check whether libglx.so got installed.  some releases earlier than x740
    #will not actually have this libglx.so
    if [ ! -f /usr/lib/xorg/modules/extensions/libglx.so ]; then
        dpkg-divert --remove --rename --package xorg-driver-fglrx --divert /usr/lib/fglrx/libglx.so.xlibmesa /usr/lib/xorg/modules/extensions/libglx.so > /dev/null
    fi

    update-alternatives --force \
        --install /etc/ld.so.conf.d/GL.conf gl_conf /usr/lib/fglrx/ld.so.conf 1000 \
        --slave /usr/bin/aticonfig aticonfig /usr/lib/fglrx/bin/aticonfig \
        --slave /usr/bin/atiode atiode /usr/lib/fglrx/bin/atiode \
        --slave /usr/bin/amdnotifyui amdnotifyui /usr/lib/fglrx/bin/amdnotifyui \
        --slave /usr/bin/amdcccle amdcccle /usr/lib/fglrx/bin/amdcccle \
        --slave /usr/bin/amdxdg-su amdxdg_su /usr/lib/fglrx/bin/amdxdg-su \
        --slave /usr/share/applications/ubuntu-amdcccle.desktop amdcccle_desktop /usr/share/fglrx/amdcccle.desktop \
        --slave /usr/share/applications/ubuntu-amdccclesu.desktop amdccclesu_desktop /usr/share/fglrx/amdccclesu.desktop \
        --slave /usr/bin/fgl_glxgears fgl_glxgears /usr/lib/fglrx/bin/fgl_glxgears \
        --slave /usr/bin/fglrxinfo fglrxinfo /usr/lib/fglrx/bin/fglrxinfo \
        --slave /usr/bin/atiodcli atiodcli  /usr/lib/fglrx/bin/atiodcli \
        --slave /usr/bin/atieventsd atieventsd  /usr/lib/fglrx/bin/atieventsd \
        --slave /usr/lib/xorg/modules/drivers/fglrx_drv.so fglrx_drv /usr/lib/fglrx/xorg/modules/drivers/fglrx_drv.so \
        --slave /usr/lib/dri/fglrx_dri.so fglrx_dri /usr/lib/fglrx/dri/fglrx_dri.so \
        --slave /usr/lib/libAMDXvBA.cap libAMDXvBA_cap /usr/lib/fglrx/libAMDXvBA.cap \
        --slave /etc/modprobe.d/fglrx.conf fglrx_modconf /lib/fglrx/modprobe.conf \
        --slave /etc/X11/Xsession.d/10fglrx 10fglrx /usr/lib/fglrx/10fglrx \
        --slave /etc/ati ati_conf /usr/lib/fglrx/etc/ati \
        --slave /usr/lib/xorg/extra-modules xorg_extra_modules /usr/lib/fglrx/xorg \
        --slave /usr/lib/libaticalcl.so libaticalcl.so /usr/lib/fglrx/libaticalcl.so \
        --slave /usr/lib32/libaticalcl.so libaticalcl.so_lib32 /usr/lib32/fglrx/libaticalcl.so \
        --slave /usr/lib/libaticalrt.so libaticalrt.so /usr/lib/fglrx/libaticalrt.so \
        --slave /usr/lib32/libaticalrt.so libaticalrt.so_lib32 /usr/lib32/fglrx/libaticalrt.so \
        --slave /usr/share/grub-gfxpayload-lists/blacklist/10_$PACKAGE_NAME grub_fb_blacklist /usr/share/fglrx/fglrx.grub-gfxpayload
    # ldconfig needs to be run immediately as we're changing /etc/ld.so.conf.d/ with
    # alternatives.
    LDCONFIG_NOTRIGGER=y ldconfig

    # Trigger gmenu so that the icons will show up in the menu
    dpkg-trigger --by-package=$PACKAGE_NAME gmenucache || true

    CURRENT_KERNEL=$(uname -r)
    NEWEST_KERNEL=$(get_newest_kernel "$KERNELS")

    ALTERNATIVE=$(readlink /etc/alternatives/gl_conf)
    if [ "$ALTERNATIVE" = "/usr/lib/fglrx/ld.so.conf" ]; then
        # Update initramfs so that the blacklist ends up in the initramfs
        update-initramfs -u
            
        if [ -n "$NEWEST_KERNEL" ] && [ ${CURRENT_KERNEL} != ${NEWEST_KERNEL} ]; then
            # This can fail when dealing with a chroot see LP: #556653
            update-initramfs -u -k $CURRENT_KERNEL || true
        fi
    fi

    # If the delayed module build feature is enabled
    # i.e. if $DONT_BUILD_MODULE is set to 1
    # or if $TMP_FILE exists
    if [ "${DONT_BUILD_MODULE}1" -eq "11" ] || [ -e $TMP_FILE ]; then
        # Do not build the module and create
        # the Upstart script which will
        # build the module on next boot
        cat > $INIT_SCRIPT <<EOF
# Warning: This file is autogenerated by $PACKAGE_NAME. All changes to this file will be lost.
start on (starting oem-config
          or starting gdm
          or starting kdm
          or starting xdm
          or starting uxlaunch)
task

script
     dkms add -m $PACKAGE_NAME -v $CVERSION
     /usr/lib/dkms/dkms_autoinstaller start || ( rm -f $INIT_SCRIPT && exit 1 )
     modprobe $PACKAGE_NAME || true
     rm -f $INIT_SCRIPT
end script
EOF
    else
        /usr/lib/dkms/common.postinst $PACKAGE_NAME $CVERSION /usr/share/$PACKAGE_NAME $ARCH $2
    fi

    #Update the initramfs as radeon might get loaded from it normally
    /usr/sbin/update-initramfs -u

    # Update the grub gfxpayload blacklist
    if which update-grub-gfxpayload >/dev/null 2>&1; then
        update-grub-gfxpayload
    fi
fi

#DEBHELPER#
